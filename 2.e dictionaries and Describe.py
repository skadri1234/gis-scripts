"""
Your comment block goes here
"""

## WORKING WITH DICTIONARIES AND ARCPY.DA.DESCRIBE()

## IN THIS EXERCISE, YOU WILL PERFORM THE FOLLOWING...
##      USE arcpy.da.Describe() to retrieve the description dictionary of a raster
##      EXTRACT AND PRINT VARIOUS INTERESTING ITEMS FROM THE DESCRIPTION

print("initializing")

# IMPORT ARCPY, SET THE ENVIRONMENTAL VARIABLES AND PATH VARIABLES
import arcpy
dl = "C:/"
data_path = dl + "NRE_5585/Data/"
temp_path = dl + "NRE_5585/Temp/"
res_path = dl + "NRE_5585/Results/"
arcpy.env.overwriteOutput = True
arcpy.env.workspace = data_path
# INVOKE arcpy.da.Describe ON landcover.img IN THE data DIRECTORY

desc = arcpy.da.Describe("landcover.img")

# EXTRACT THE extent VALUE FROM desc AND STORE IT IN bb (bounding box)

bb = desc['extent']

# PRINT bb. NOTICE THAT IT PRINTS AS A LIST
print(bb)
# PRINT THE XMin VALUE FROM bb. NOTICE THAT WE CANNOT USE SUBSCRIPTING ON bb EVEN THOUGH IT PRINTS AS A LIST
# THE extent VALUE IN THE DESCRIPTION DICTIONARY IS AN OBJECT, NOT A LIST.

print(bb.XMin)

# HEREAFTER, I WILL WRITE, FOR EXAMPLE, PRINT height. PLEASE UNDERSTAND THIS TO BE A SHORTHAND FOR
# PRINT THE VALUE IN desc ASSOCIATED WITH THE height KEY.
print(desc['height'])
# PRINT height, width FROM THE DESCRIPTION. ASSIGN THESE TO nrows AND ncols. ARCPY IS USING THE TERM height TO MEAN THE EXTENT IN THE
# NORTH-SOUTH DIRECTION. RASTERS ARE OFTEN, BUT NOT ALWAYS, STORED IN ROW-MAJOR FORM, SO I PREFER TO CALL THIS
# nrows INSTEAD OF height, WHICH I ASSOCIATE WITH ELEVATION, HEIGHT ABOVE SOME DATUM

nrows = desc['height']
ncols = desc['width']

# PRINT meanCellWidth, meanCellHeight FROM THE DESCRIPTION. ASSIGN THESE TO dx AND dy. HERE, "width" MEANS THE PIXELS' SPATIAL EXTENT
# IN THE EASTING DIRECTION, AND "height" IS THE SPATIAL EXTENT IN THE NORTHING DIRECTION. ONE IS TEMPTED TO ADOPT
# MORE SPATIAL AND LESS ABSTRACT NOTATION, LIKE de AND dn. HOWEVER, arcpy IN CONSISTENT IN USING X AND Y NOTATION,
# SO LET'S STICK TO THAT FOR CONSISTENCY'S SAKE. HOWEVER, WE'LL ABANDON THE NOTION THAT "HEIGHT" IS ASSOCIATED WITH
# NORTH-SOUTH AND "WIDTH" WITH EAST-WEST.
print(desc['meanCellWidth'])
print(desc['meanCellHeight'])
dx = desc['meanCellWidth']
dy = desc['meanCellHeight']

# PRINT noDataValue FROM THE DESCRIPTION AND ASSIGN IT TO ndv. PIXELS WHOSE VALUE IS THE noDataValue HAVE NO VALUE AND USUALLY NEED
# SPECIAL TREATMENT WHEN WE DO THINGS WITH THE RASTER.

print(desc['noDataValue'])
ndv = desc['noDataValue']

# PRINT pixelType AND ASSIGN IT TO pixelType. RASTERS OFTEN HAVE NON-PYTHONIC DATA TYPES. IF THEY DO, WE USUALLY
# NEED TO CAST THEM TO A NATIVE PYTHON DATA TYPE BEFORE USING THEM.
print(desc['pixelType'])
pixelType = desc['pixelType']

# PRINT spatialReference AND ASSIGN IT TO sr. THE spatialReference OBJECT HAS ALL THE SPATIAL COORDINATE
# SYSTEM INFORMATION ABOUT THIS RASTER. THE spatialReference OBJECT HAS FOUR ATTRIBUTES OF PARTICULAR NOTE
print(desc['spatialReference'])
sr = desc['spatialReference']

# NOTICE THAT sr IS AN OBJECT, NOT A DICTIONARY. PYTHON IS AN "OBJECT-ORIENTED LANGUAGE", WHICH MEANS THAT
# THERE ARE THINGS CALLED "OBJECTS" THAT ARE THE FUNDAMENTAL DATA STRUCTURE IN THE LANGUAGE. WE WILL NOT
# DELVE MUCH INTO THE OBJECT-ORIENTED PARTS OF PYTHON; HOWEVER, WE USE OBJECTS EXTENSIVELY. ANY TIME YOU SEE
# THE "DOT" NOTATION, AS IN sr.PCSName or arcpy.da.Describe, YOU KNOW THAT sr AND arcpy ARE OBJECTS (OR
# SOMETHING THAT WE USE AS IF IT WAS AN OBJECT). SO, WE USE SQUARE BRACKETS TO EXTRACT PARTS FROM LISTS AND
# DICTIONARIES BUT WE USE THE "DOT NOTATION" TO EXTRACT PARTS FROM OBJECTS.

# PRINT sr.PCSName THIS IS THE FULL NAME OF THE COORDINATE SYSTEM. IF THIS IS A GEOGRAPHIC COORDINATE SYSTEM,
# LIKE WGS84 OR NAD83, THEN THAT WILL BE THE NAME. IF THIS IS A PROJECTED COORDINATE SYSTEM, LIKE SPC83, THEN
# THAT WILL BE THE NAME AND THE DATUM IS STORED FUTHER DOWN IN THE sr OBJECT
print(sr.PCSName)


# PRINT sr.PCSCode THIS IS USEFUL FOR SETTING THE SPATIAL REFERENCE OF NEW OBJECTS
print(sr.PCSCode)


# PRINT sr.linearUnitName WE MUST ALWAYS BE MINDFUL OF UNITS. SPATIAL DATA COME IN MANY DIFFERENT UNITS AND WE MUST
# NOT MIX THEM
print(sr.linearUnitName)


# PRINT sr.metersPerUnit THIS IS THE ARCPY CONVERSION FROM THE LINEAR UNIT TO METERS. WE ALREADY HAVE DEFINED THE
# PROPER CONVERSION VALUES IN A PREVIOUS EXERCISE, BUT IT CAN BE HANDY TO HAVE THIS HERE.
print(sr.metersPerUnit)
